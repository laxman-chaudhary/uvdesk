<?php

namespace ContainerDGeH6xR;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/*
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class get_Container_Private_TwigService extends App_KernelProdContainer
{
    /*
     * Gets the public '.container.private.twig' shared service.
     *
     * @return \Twig\Environment
     */
    public static function do($container, $lazyLoad = true)
    {
        $container->services['.container.private.twig'] = $instance = new \Twig\Environment(($container->services['uvdesk_extension.twig_loader'] ?? $container->load('getUvdeskExtension_TwigLoaderService')), ['debug' => false, 'strict_variables' => false, 'autoescape' => 'name', 'cache' => ($container->targetDir.''.'/twig'), 'charset' => 'UTF-8']);

        $a = ($container->services['translator'] ?? $container->load('getTranslatorService'));
        $b = ($container->services['router'] ?? $container->getRouterService());
        $c = ($container->services['request_stack'] ?? ($container->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack()));
        $d = ($container->services['.container.private.security.token_storage'] ?? $container->get_Container_Private_Security_TokenStorageService());
        $e = new \Symfony\Bridge\Twig\AppVariable();
        $e->setEnvironment('prod');
        $e->setDebug(false);
        if ($container->has('.container.private.security.token_storage')) {
            $e->setTokenStorage($d);
        }
        if ($container->has('request_stack')) {
            $e->setRequestStack($c);
        }

        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\CsrfExtension());
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\TranslationExtension($a));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\AssetExtension(($container->services['uvdesk_extension.assets_manager'] ?? $container->load('getUvdeskExtension_AssetsManagerService'))));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\CodeExtension(($container->privates['debug.file_link_formatter'] ?? ($container->privates['debug.file_link_formatter'] = new \Symfony\Component\HttpKernel\Debug\FileLinkFormatter(NULL))), \dirname(__DIR__, 4), 'UTF-8'));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\RoutingExtension($b));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\YamlExtension());
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\StopwatchExtension(($container->privates['debug.stopwatch'] ?? ($container->privates['debug.stopwatch'] = new \Symfony\Component\Stopwatch\Stopwatch(true))), false));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\ExpressionExtension());
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\HttpKernelExtension());
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\HttpFoundationExtension(new \Symfony\Component\HttpFoundation\UrlHelper($c, ($container->privates['router.request_context'] ?? $container->getRouter_RequestContextService()))));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\WebLinkExtension($c));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\SerializerExtension());
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\FormExtension($a));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\LogoutUrlExtension(($container->privates['security.logout_url_generator'] ?? $container->getSecurity_LogoutUrlGeneratorService())));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\SecurityExtension(($container->services['.container.private.security.authorization_checker'] ?? $container->get_Container_Private_Security_AuthorizationCheckerService()), new \Symfony\Component\Security\Http\Impersonate\ImpersonateUrlGenerator($c, ($container->privates['security.firewall.map'] ?? $container->getSecurity_Firewall_MapService()), $d)));
        $instance->addExtension(new \Doctrine\Bundle\DoctrineBundle\Twig\DoctrineExtension());
        $instance->addExtension(new \Knp\Bundle\PaginatorBundle\Twig\Extension\PaginationExtension(new \Knp\Bundle\PaginatorBundle\Helper\Processor($b, $a)));
        $instance->addGlobal('app', $e);
        $instance->addRuntimeLoader(new \Twig\RuntimeLoader\ContainerRuntimeLoader(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService, [
            'Symfony\\Bridge\\Twig\\Extension\\CsrfRuntime' => ['privates', 'twig.runtime.security_csrf', 'getTwig_Runtime_SecurityCsrfService', true],
            'Symfony\\Bridge\\Twig\\Extension\\HttpKernelRuntime' => ['privates', 'twig.runtime.httpkernel', 'getTwig_Runtime_HttpkernelService', true],
            'Symfony\\Bridge\\Twig\\Extension\\SerializerRuntime' => ['privates', 'twig.runtime.serializer', 'getTwig_Runtime_SerializerService', true],
            'Symfony\\Component\\Form\\FormRenderer' => ['privates', 'twig.form.renderer', 'getTwig_Form_RendererService', true],
        ], [
            'Symfony\\Bridge\\Twig\\Extension\\CsrfRuntime' => '?',
            'Symfony\\Bridge\\Twig\\Extension\\HttpKernelRuntime' => '?',
            'Symfony\\Bridge\\Twig\\Extension\\SerializerRuntime' => '?',
            'Symfony\\Component\\Form\\FormRenderer' => '?',
        ])));
        $instance->addGlobal('default_agent_image_path', 'bundles/uvdeskcoreframework/images/uv-avatar-batman.png');
        $instance->addGlobal('default_customer_image_path', 'bundles/uvdeskcoreframework/images/uv-avatar-ironman.png');
        $instance->addGlobal('default_helpdesk_image_path', 'bundles/uvdeskcoreframework/images/uv-avatar-uvdesk.png');
        $instance->addGlobal('max_post_size', 8388608);
        $instance->addGlobal('max_file_uploads', 20);
        $instance->addGlobal('upload_max_filesize', 2097152);
        $instance->addGlobal('user_service', ($container->services['user.service'] ?? $container->load('getUser_ServiceService')));
        $instance->addGlobal('uvdesk_service', ($container->services['uvdesk.service'] ?? $container->load('getUvdesk_ServiceService')));
        $instance->addGlobal('recaptcha_service', ($container->services['recaptcha.service'] ?? $container->load('getRecaptcha_ServiceService')));
        $instance->addGlobal('ticket_service', ($container->services['ticket.service'] ?? $container->load('getTicket_ServiceService')));
        $instance->addGlobal('csrf_token_generator', ($container->services['.container.private.security.csrf.token_manager'] ?? $container->load('get_Container_Private_Security_Csrf_TokenManagerService')));
        $instance->addGlobal('email_service', ($container->services['email.service'] ?? $container->load('getEmail_ServiceService')));
        $instance->addGlobal('uvdesk_extensibles', ($container->services['uvdesk.extensibles'] ?? $container->load('getUvdesk_ExtensiblesService')));
        $instance->addGlobal('uvdesk_core_file_system', ($container->services['uvdesk.core.file_system.service'] ?? $container->load('getUvdesk_Core_FileSystem_ServiceService')));
        $instance->addGlobal('uvdesk_automations', ($container->services['uvdesk.automations'] ?? $container->load('getUvdesk_AutomationsService')));
        (new \Symfony\Bundle\TwigBundle\DependencyInjection\Configurator\EnvironmentConfigurator('F j, Y H:i', '%d days', NULL, 0, '.', ','))->configure($instance);

        return $instance;
    }
}
