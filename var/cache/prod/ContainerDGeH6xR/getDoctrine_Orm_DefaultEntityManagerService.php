<?php

namespace ContainerDGeH6xR;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/*
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getDoctrine_Orm_DefaultEntityManagerService extends App_KernelProdContainer
{
    /*
     * Gets the public 'doctrine.orm.default_entity_manager' shared service.
     *
     * @return \Doctrine\ORM\EntityManager
     */
    public static function do($container, $lazyLoad = true)
    {
        if ($lazyLoad) {
            return $container->services['doctrine.orm.default_entity_manager'] = $container->createProxy('EntityManager_9a5be93', function () use ($container) {
                return \EntityManager_9a5be93::staticProxyConstructor(function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) use ($container) {
                    $wrappedInstance = self::do($container, false);

                    $proxy->setProxyInitializer(null);

                    return true;
                });
            });
        }

        $a = new \Doctrine\ORM\Configuration();

        $b = new \Doctrine\Persistence\Mapping\Driver\MappingDriverChain();

        $c = new \Doctrine\ORM\Mapping\Driver\AnnotationDriver(($container->privates['annotations.cached_reader'] ?? $container->getAnnotations_CachedReaderService()), [0 => (\dirname(__DIR__, 4).'/src/Entity'), 1 => (\dirname(__DIR__, 4).'/vendor/uvdesk/core-framework/Entity'), 2 => (\dirname(__DIR__, 4).'/vendor/uvdesk/automation-bundle/Entity'), 3 => (\dirname(__DIR__, 4).'/vendor/uvdesk/support-center-bundle/Entity')]);

        $b->addDriver($c, 'App\\Entity');
        $b->addDriver($c, 'Webkul\\UVDesk\\CoreFrameworkBundle\\Entity');
        $b->addDriver($c, 'Webkul\\UVDesk\\AutomationBundle\\Entity');
        $b->addDriver($c, 'Webkul\\UVDesk\\SupportCenterBundle\\Entity');

        $a->setEntityNamespaces(['App' => 'App\\Entity', 'UVDeskCoreFrameworkBundle' => 'Webkul\\UVDesk\\CoreFrameworkBundle\\Entity', 'UVDeskAutomationBundle' => 'Webkul\\UVDesk\\AutomationBundle\\Entity', 'UVDeskSupportCenterBundle' => 'Webkul\\UVDesk\\SupportCenterBundle\\Entity']);
        $a->setMetadataCache(new \Symfony\Component\Cache\Adapter\PhpArrayAdapter(($container->targetDir.''.'/doctrine/orm/default_metadata.php'), new \Symfony\Component\Cache\Adapter\ArrayAdapter()));
        $a->setQueryCache(($container->privates['cache.doctrine.orm.default.query'] ?? ($container->privates['cache.doctrine.orm.default.query'] = new \Symfony\Component\Cache\Adapter\ArrayAdapter())));
        $a->setResultCache(($container->privates['cache.doctrine.orm.default.result'] ?? ($container->privates['cache.doctrine.orm.default.result'] = new \Symfony\Component\Cache\Adapter\ArrayAdapter())));
        $a->setMetadataDriverImpl(new \Doctrine\Bundle\DoctrineBundle\Mapping\MappingDriver($b, new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService, [
            'doctrine.ulid_generator' => ['privates', 'doctrine.ulid_generator', 'getDoctrine_UlidGeneratorService', true],
            'doctrine.uuid_generator' => ['privates', 'doctrine.uuid_generator', 'getDoctrine_UuidGeneratorService', true],
        ], [
            'doctrine.ulid_generator' => '?',
            'doctrine.uuid_generator' => '?',
        ])));
        $a->setProxyDir(($container->targetDir.''.'/doctrine/orm/Proxies'));
        $a->setProxyNamespace('Proxies');
        $a->setAutoGenerateProxyClasses(true);
        $a->setClassMetadataFactoryName('Doctrine\\Bundle\\DoctrineBundle\\Mapping\\ClassMetadataFactory');
        $a->setDefaultRepositoryClassName('Doctrine\\ORM\\EntityRepository');
        $a->setNamingStrategy(new \Doctrine\ORM\Mapping\UnderscoreNamingStrategy());
        $a->setQuoteStrategy(new \Doctrine\ORM\Mapping\DefaultQuoteStrategy());
        $a->setEntityListenerResolver(new \Doctrine\Bundle\DoctrineBundle\Mapping\ContainerEntityListenerResolver($container));
        $a->setRepositoryFactory(new \Doctrine\Bundle\DoctrineBundle\Repository\ContainerRepositoryFactory(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService, [
            'Webkul\\UVDesk\\CoreFrameworkBundle\\Repository\\AgentActivityRepository' => ['privates', 'Webkul\\UVDesk\\CoreFrameworkBundle\\Repository\\AgentActivityRepository', 'getAgentActivityRepositoryService', true],
            'Webkul\\UVDesk\\CoreFrameworkBundle\\Repository\\RecaptchaRepository' => ['privates', 'Webkul\\UVDesk\\CoreFrameworkBundle\\Repository\\RecaptchaRepository', 'getRecaptchaRepositoryService', true],
            'Webkul\\UVDesk\\SupportCenterBundle\\Repository\\AnnouncementRepository' => ['privates', 'Webkul\\UVDesk\\SupportCenterBundle\\Repository\\AnnouncementRepository', 'getAnnouncementRepositoryService', true],
        ], [
            'Webkul\\UVDesk\\CoreFrameworkBundle\\Repository\\AgentActivityRepository' => '?',
            'Webkul\\UVDesk\\CoreFrameworkBundle\\Repository\\RecaptchaRepository' => '?',
            'Webkul\\UVDesk\\SupportCenterBundle\\Repository\\AnnouncementRepository' => '?',
        ])));

        $instance = \Doctrine\ORM\EntityManager::create(($container->services['doctrine.dbal.default_connection'] ?? $container->load('getDoctrine_Dbal_DefaultConnectionService')), $a);

        (new \Doctrine\Bundle\DoctrineBundle\ManagerConfigurator([], []))->configure($instance);

        return $instance;
    }
}
